#!/usr/bin/env node

import puppeteer from "puppeteer";
import minimist from "minimist";
import path from "path";
import fs from "fs/promises";
import lodash from "lodash";

const { kebabCase } = lodash;

const argv = minimist(process.argv.slice(2));

let _browser;

const results = new Map();

async function main() {
  if (!argv._.length || argv.help || argv.h) {
    if (!argv.file) {
      displayHelp();
      return;
    }
  }

  const packageNames = await getPackageNames();

  try {
    for (let packageName of packageNames) {
      // if the user specifies a priority
      if (argv.p || argv.priority) {
        await searchForPackage(packageName, {
          priority: argv.p || argv.priority,
          ...(argv.v || (argv.version && { version: argv.v || argv.version })),
        });
      } else {
        // otherwise search for medium high and critical versions
        await searchForPackage(packageName, {
          priority: "medium",
          ...(argv.v || (argv.version && { version: argv.v || argv.version })),
        }).then(cacheResults);

        await searchForPackage(packageName, {
          priority: "high",
          ...(argv.v || (argv.version && { version: argv.v || argv.version })),
        }).then(cacheResults);

        await searchForPackage(packageName, {
          priority: "critical",
          ...(argv.v || (argv.version && { version: argv.v || argv.version })),
        }).then(cacheResults);
      }
    }
  } catch (error) {
    console.error(error.message);
    console.error(error.stack);
    throw new Error(error);
  } finally {
    if (_browser) {
      await _browser.close();
    }
  }

  Array.from(results.entries()).forEach(([packageName, results]) => {
    console.log(`${packageName}:`);
    results.forEach(({ count, priority, version }) => {
      console.log(`  ${count} ${priority} version=${version}`);
    });
  });
}

main()
  .then(() => {
    process.exit(0);
  })
  .catch(() => {
    process.exit(1);
  });

async function searchForPackage(packageName = "", options = {}) {
  const packageSearchUrl = `https://ubuntu.com/security/cve?package=${kebabCase(
    packageName.toLowerCase()
  )}`;

  const browser = await createBrowser({
    defaultViewport: null,
  });

  const page = await browser.newPage();

  await page.setCookie({
    name: "_cookies_accepted",
    value: "all",
    domain: "ubuntu.com",
    expires: Date.now() / 1000 + 10,
  });

  const additionalSearchParameters = Object.entries(options).map(
    ([key, value]) => `${key}=${value}`
  );

  const searchUrl = `${packageSearchUrl}&${
    additionalSearchParameters.length
      ? additionalSearchParameters.join("&")
      : ""
  }`;

  await page.goto(searchUrl);

  await page.waitForSelector("#main-content");

  const count = await page
    .$eval("#main-content h2", (el) => el.innerText)
    .then((str) => str.split("of ")[1] || "0");

  const { p, priority = p, v, version = v || "any" } = options;

  const result = {
    packageName,
    priority,
    version: version,
    count: parseInt(count.split(" ")[0], 10),
  };

  return result;
}

async function createBrowser() {
  if (_browser) {
    return _browser;
  }

  _browser = await puppeteer.launch({
    headless: argv.headless !== false,
  });

  return _browser;
}

async function cacheResults(result) {
  const { packageName } = result;

  if (!results.has(packageName)) {
    results.set(packageName, []);
  }

  results.get(packageName).push(result);
}

async function getPackageNames() {
  if (argv.file || argv.f) {
    return fs.readFile(argv.file || argv.f, "utf8").then((buf) =>
      buf
        .toString()
        .split("\n")
        .filter((v) => v && v.length)
        .map((line = "") => line.trim())
    );
  }

  return argv._;
}

async function displayHelp() {
  console.log(`
    Args:
    
    --file, -f:        get a list of package names from an input file. 
                      should be a list of package names per line.
    --priority, -p    critical, high, medium, low.  By default will check critical, high, medium
    --version, -v     which version of ubuntu? e.g. jammy, impish, focal 
  `);

  console.log(`
    Usage:
      $ ubuntu-cve-lookup [package-name] [package-name]

      or

      $ ubuntu-cve-lookup --file newline-separated-list-of-package-names
  `);
}
